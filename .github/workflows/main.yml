name: Build Armbian

on:
  repository_dispatch:
  workflow_dispatch:

env:
  UPLOAD_IMAGE: true
  CUSTOMIZATIOM_SCRIPT: userpatches/customize-image.sh
  MSD_PATCH: userpatches/2002-usb-gadget-f_mass_storage-forced-eject.patch
  ARMBIAN_CHECK_FIRST_LOGIN: armbian-check-first-login.sh
  AIMBIAN_FIRSTLOGIN: armbian-firstlogin
  KERNEL_CONFIG: config
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Download source code
      run: |
        pwd
        echo   $GITHUB_WORKSPACE
        # git clone --depth=1 --branch=main https://github.com/armbian/build
        git clone --depth=1 --branch=main https://github.com/Road-tech/armbian-build.git build
     
    - name: Parepre Armbian Env
      run: |
        cd build
        #mkdir -p userpatches/kernel/rockchip64-current && cd userpatches/kernel/rockchip64-current 
        #touch 2002-usb-gadget-f_mass_storage-forced-eject.patch
        #cat $GITHUB_WORKSPACE/$MSD_PATCH > 2002-usb-gadget-f_mass_storage-forced-eject.patch
        # [ -e $MSD_PATCH ] && cp $GITHUB_WORKSPACE/$MSD_PATCH 2002-usb-gadget-f_mass_storage-forced-eject.patch
        #cd -
        ./compile.sh build BOARD=rock64 BRANCH=current BUILD_DESKTOP=no BUILD_MINIMAL=no KERNEL_CONFIGURE=no RELEASE=jammy KERNEL_GIT=full
   
    - name: Add customize-image.sh
      id: build
      run: |
        cd build
        echo "cp userpatches/customize-image.sh and compile"
        [ -e $CUSTOMIZATIOM_SCRIPT ] && mv -f $GITHUB_WORKSPACE/$CUSTOMIZATIOM_SCRIPT userpatches/customize-image.sh
        ./compile.sh build BOARD=rock64 BRANCH=current BUILD_DESKTOP=no BUILD_MINIMAL=no KERNEL_CONFIGURE=no RELEASE=jammy KERNEL_GIT=full
        cd  output/images
        tar -Jcvf /tmp/Rock64_image.tar.xz  *.img    
        echo "::set-output name=status::success"

    - name: Upload Armbian image
      uses: actions/upload-artifact@master
      if: steps.build.outputs.status == 'success'
      with:
        name: Rock64_image
        path: /tmp/Rock64_image.tar.xz
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        echo "::set-output name=status::success"
    
    - name: Upload image to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: /tmp/Rock64_image.tar.xz 
